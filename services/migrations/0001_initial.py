# Generated by Django 5.1.9 on 2025-05-15 20:52

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("core", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Service",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                (
                    "name",
                    models.CharField(
                        help_text="Name of the service",
                        max_length=100,
                        verbose_name="service name",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Detailed description of the service",
                        verbose_name="description",
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("documentation", "Documentation"),
                            ("permit", "Permit"),
                            ("certificate", "Certificate"),
                            ("license", "License"),
                            ("clearance", "Clearance"),
                            ("registration", "Registration"),
                            ("other", "Other"),
                        ],
                        default="other",
                        help_text="Category of the service",
                        max_length=20,
                        verbose_name="category",
                    ),
                ),
                (
                    "base_price",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Base price for the service in NGN",
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="base price",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether the service is currently available",
                        verbose_name="active status",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "service",
                "verbose_name_plural": "services",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="ServiceRequest",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                (
                    "amount",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Amount paid for the service in NGN",
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="amount",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("processing", "Processing"),
                            ("completed", "Completed"),
                            ("cancelled", "Cancelled"),
                            ("rejected", "Rejected"),
                        ],
                        default="pending",
                        help_text="Current status of the request",
                        max_length=20,
                        verbose_name="status",
                    ),
                ),
                (
                    "payment_status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("paid", "Paid"),
                            ("failed", "Failed"),
                            ("refunded", "Refunded"),
                        ],
                        default="pending",
                        help_text="Current payment status",
                        max_length=20,
                        verbose_name="payment status",
                    ),
                ),
                (
                    "payment_reference",
                    models.CharField(
                        blank=True,
                        help_text="Unique reference for the payment",
                        max_length=100,
                        null=True,
                        unique=True,
                        verbose_name="payment reference",
                    ),
                ),
                (
                    "payment_link",
                    models.URLField(
                        blank=True,
                        help_text="Link to complete payment",
                        max_length=500,
                        null=True,
                        verbose_name="payment link",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Additional notes about the request",
                        verbose_name="notes",
                    ),
                ),
                (
                    "completed_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the request was completed",
                        null=True,
                        verbose_name="completed at",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "landmark",
                    models.ForeignKey(
                        help_text="Nearest landmark to service location",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="service_requests",
                        to="core.landmark",
                        verbose_name="landmark",
                    ),
                ),
                (
                    "location",
                    models.ForeignKey(
                        help_text="Location where service is needed",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="service_requests",
                        to="core.location",
                        verbose_name="location",
                    ),
                ),
                (
                    "service",
                    models.ForeignKey(
                        help_text="Requested service",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="requests",
                        to="services.service",
                        verbose_name="service",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="User who requested the service",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="service_requests",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="requester",
                    ),
                ),
            ],
            options={
                "verbose_name": "service request",
                "verbose_name_plural": "service requests",
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddIndex(
            model_name="service",
            index=models.Index(
                fields=["category"], name="services_se_categor_d1e3c4_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="service",
            index=models.Index(
                fields=["is_active"], name="services_se_is_acti_91b7ea_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="servicerequest",
            index=models.Index(fields=["status"], name="services_se_status_9254ae_idx"),
        ),
        migrations.AddIndex(
            model_name="servicerequest",
            index=models.Index(
                fields=["payment_status"], name="services_se_payment_577a52_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="servicerequest",
            index=models.Index(
                fields=["user", "created_at"], name="services_se_user_id_d1b32b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="servicerequest",
            index=models.Index(
                fields=["service", "status"], name="services_se_service_a7707a_idx"
            ),
        ),
    ]
