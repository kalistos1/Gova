# Generated by Django 5.1.9 on 2025-05-15 20:52

import django.core.serializers.json
import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("core", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Report",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the report",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="Brief title describing the issue",
                        max_length=200,
                        validators=[django.core.validators.MinLengthValidator(10)],
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Detailed description of the issue",
                        validators=[django.core.validators.MinLengthValidator(50)],
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("INFRASTRUCTURE", "Infrastructure"),
                            ("SECURITY", "Security"),
                            ("HEALTH", "Healthcare"),
                            ("EDUCATION", "Education"),
                            ("ENVIRONMENT", "Environment"),
                            ("UTILITIES", "Public Utilities"),
                            ("CORRUPTION", "Corruption"),
                            ("OTHER", "Other"),
                        ],
                        help_text="Category of the reported issue",
                        max_length=20,
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("LOW", "Low"),
                            ("MEDIUM", "Medium"),
                            ("HIGH", "High"),
                            ("URGENT", "Urgent"),
                        ],
                        default="MEDIUM",
                        help_text="Priority level of the issue",
                        max_length=10,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending Review"),
                            ("VERIFIED", "Verified"),
                            ("IN_PROGRESS", "In Progress"),
                            ("RESOLVED", "Resolved"),
                            ("REJECTED", "Rejected"),
                        ],
                        default="PENDING",
                        help_text="Current status of the report",
                        max_length=20,
                    ),
                ),
                (
                    "location",
                    models.FloatField(
                        blank=True,
                        help_text="Geographic location of the reported issue (latitude, longitude)",
                        null=True,
                    ),
                ),
                (
                    "address",
                    models.CharField(
                        help_text="Physical address of the issue location",
                        max_length=255,
                    ),
                ),
                (
                    "landmark",
                    models.CharField(
                        blank=True,
                        help_text="Nearby landmark for easier location identification",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "images",
                    models.JSONField(
                        blank=True,
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                        help_text="List of image URLs related to the issue",
                        null=True,
                    ),
                ),
                (
                    "videos",
                    models.JSONField(
                        blank=True,
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                        help_text="List of video URLs related to the issue",
                        null=True,
                    ),
                ),
                (
                    "voice_notes",
                    models.JSONField(
                        blank=True,
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                        help_text="List of voice note URLs related to the issue",
                        null=True,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Timestamp when the report was created",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Timestamp when the report was last updated",
                    ),
                ),
                (
                    "is_anonymous",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the report was submitted anonymously",
                    ),
                ),
                (
                    "upvotes",
                    models.PositiveIntegerField(
                        default=0, help_text="Number of upvotes the report has received"
                    ),
                ),
                (
                    "ai_summary",
                    models.TextField(
                        blank=True,
                        help_text="AI-generated summary of the report",
                        null=True,
                    ),
                ),
                (
                    "ai_priority_score",
                    models.FloatField(
                        blank=True,
                        help_text="AI-generated priority score (0-1)",
                        null=True,
                    ),
                ),
                (
                    "submission_channel",
                    models.CharField(
                        choices=[
                            ("WEB", "Web Dashboard"),
                            ("MOBILE", "Mobile App"),
                            ("USSD", "USSD"),
                            ("SMS", "SMS"),
                            ("WHATSAPP", "WhatsApp"),
                            ("KIOSK", "Physical Kiosk"),
                            ("VOICE", "Voice Call"),
                        ],
                        default="WEB",
                        help_text="Channel through which the report was submitted",
                        max_length=20,
                    ),
                ),
                (
                    "submission_language",
                    models.CharField(
                        default="en",
                        help_text="Language used for submission (en, ig, pcm)",
                        max_length=10,
                    ),
                ),
                (
                    "original_text",
                    models.TextField(
                        blank=True,
                        help_text="Original text before translation if applicable",
                        null=True,
                    ),
                ),
                (
                    "device_info",
                    models.JSONField(
                        blank=True,
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                        help_text="Device information for mobile/web submissions",
                        null=True,
                    ),
                ),
                (
                    "offline_sync_id",
                    models.CharField(
                        blank=True,
                        help_text="ID for tracking offline submissions",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "payment_status",
                    models.CharField(
                        choices=[
                            ("NOT_REQUIRED", "Payment Not Required"),
                            ("PENDING", "Payment Pending"),
                            ("PAID", "Payment Completed"),
                            ("FAILED", "Payment Failed"),
                            ("REFUNDED", "Payment Refunded"),
                        ],
                        default="NOT_REQUIRED",
                        help_text="Status of any required payment for this report",
                        max_length=20,
                    ),
                ),
                (
                    "payment_amount",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Amount required for payment, if applicable",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "transaction_reference",
                    models.CharField(
                        blank=True,
                        help_text="Flutterwave transaction reference",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "transaction_id",
                    models.CharField(
                        blank=True,
                        help_text="Flutterwave transaction ID",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "payment_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the payment was completed",
                        null=True,
                    ),
                ),
                (
                    "nin_verified",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the reporter's NIN has been verified",
                    ),
                ),
                (
                    "nin_verification_date",
                    models.DateTimeField(
                        blank=True, help_text="When the NIN was verified", null=True
                    ),
                ),
                (
                    "assigned_to",
                    models.ForeignKey(
                        blank=True,
                        help_text="Government official assigned to handle this report",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="assigned_reports",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "lga",
                    models.ForeignKey(
                        help_text="Local Government Area where the issue was reported",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="core.lga",
                    ),
                ),
                (
                    "reporter",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who submitted the report",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="reports",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Issue Report",
                "verbose_name_plural": "Issue Reports",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="AuditLog",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the audit log entry",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "action",
                    models.CharField(help_text="Type of change made", max_length=50),
                ),
                (
                    "old_value",
                    models.JSONField(
                        blank=True,
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                        help_text="Previous value before change",
                        null=True,
                    ),
                ),
                (
                    "new_value",
                    models.JSONField(
                        blank=True,
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                        help_text="New value after change",
                        null=True,
                    ),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(
                        blank=True,
                        help_text="IP address of user who made the change",
                        null=True,
                    ),
                ),
                (
                    "user_agent",
                    models.TextField(
                        blank=True,
                        help_text="User agent of browser/client that made the change",
                        null=True,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="When the change was made"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="User who made the change",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "report",
                    models.ForeignKey(
                        help_text="Report that was modified",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="audit_logs",
                        to="reports.report",
                    ),
                ),
            ],
            options={
                "verbose_name": "Audit Log Entry",
                "verbose_name_plural": "Audit Log Entries",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ReportComment",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("content", models.TextField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "is_official",
                    models.BooleanField(
                        default=False, help_text="Whether this is an official response"
                    ),
                ),
                (
                    "report",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="comments",
                        to="reports.report",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Report Comment",
                "verbose_name_plural": "Report Comments",
                "ordering": ["created_at"],
            },
        ),
        migrations.AddIndex(
            model_name="report",
            index=models.Index(
                fields=["category"], name="reports_rep_categor_b7680f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="report",
            index=models.Index(fields=["status"], name="reports_rep_status_c732ef_idx"),
        ),
        migrations.AddIndex(
            model_name="report",
            index=models.Index(
                fields=["priority"], name="reports_rep_priorit_3a669b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="report",
            index=models.Index(fields=["lga"], name="reports_rep_lga_id_5d5b65_idx"),
        ),
        migrations.AddIndex(
            model_name="report",
            index=models.Index(
                fields=["created_at"], name="reports_rep_created_a6aabf_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="report",
            index=models.Index(
                fields=["payment_status"], name="reports_rep_payment_f1ed18_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="report",
            index=models.Index(
                fields=["transaction_reference"], name="reports_rep_transac_f4a8b1_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="report",
            index=models.Index(
                fields=["submission_channel"], name="reports_rep_submiss_9dba3b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="report",
            index=models.Index(
                fields=["offline_sync_id"], name="reports_rep_offline_0a476a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="auditlog",
            index=models.Index(
                fields=["report", "created_at"], name="reports_aud_report__1283fd_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="auditlog",
            index=models.Index(
                fields=["user", "created_at"], name="reports_aud_user_id_c3448c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="auditlog",
            index=models.Index(fields=["action"], name="reports_aud_action_c56ae5_idx"),
        ),
    ]
